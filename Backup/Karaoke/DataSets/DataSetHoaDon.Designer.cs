//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Karaoke.DataSets {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSetHoaDon")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSetHoaDon : global::System.Data.DataSet {
        
        private RDataDetailDataTable tableRDataDetail;
        
        private HeaderDataDataTable tableHeaderData;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSetHoaDon() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSetHoaDon(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["RDataDetail"] != null)) {
                    base.Tables.Add(new RDataDetailDataTable(ds.Tables["RDataDetail"]));
                }
                if ((ds.Tables["HeaderData"] != null)) {
                    base.Tables.Add(new HeaderDataDataTable(ds.Tables["HeaderData"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RDataDetailDataTable RDataDetail {
            get {
                return this.tableRDataDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HeaderDataDataTable HeaderData {
            get {
                return this.tableHeaderData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DataSetHoaDon cln = ((DataSetHoaDon)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["RDataDetail"] != null)) {
                    base.Tables.Add(new RDataDetailDataTable(ds.Tables["RDataDetail"]));
                }
                if ((ds.Tables["HeaderData"] != null)) {
                    base.Tables.Add(new HeaderDataDataTable(ds.Tables["HeaderData"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableRDataDetail = ((RDataDetailDataTable)(base.Tables["RDataDetail"]));
            if ((initTable == true)) {
                if ((this.tableRDataDetail != null)) {
                    this.tableRDataDetail.InitVars();
                }
            }
            this.tableHeaderData = ((HeaderDataDataTable)(base.Tables["HeaderData"]));
            if ((initTable == true)) {
                if ((this.tableHeaderData != null)) {
                    this.tableHeaderData.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSetHoaDon";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetHoaDon.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableRDataDetail = new RDataDetailDataTable();
            base.Tables.Add(this.tableRDataDetail);
            this.tableHeaderData = new HeaderDataDataTable();
            base.Tables.Add(this.tableHeaderData);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRDataDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHeaderData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSetHoaDon ds = new DataSetHoaDon();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void RDataDetailRowChangeEventHandler(object sender, RDataDetailRowChangeEvent e);
        
        public delegate void HeaderDataRowChangeEventHandler(object sender, HeaderDataRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RDataDetailDataTable : global::System.Data.TypedTableBase<RDataDetailRow> {
            
            private global::System.Data.DataColumn columnSTT;
            
            private global::System.Data.DataColumn columnTenSanPham;
            
            private global::System.Data.DataColumn columnDVT;
            
            private global::System.Data.DataColumn columnDonGia;
            
            private global::System.Data.DataColumn columnThanhTien;
            
            private global::System.Data.DataColumn columnSoluong;
            
            private global::System.Data.DataColumn columnGiam;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDataDetailDataTable() {
                this.TableName = "RDataDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RDataDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RDataDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STTColumn {
                get {
                    return this.columnSTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TenSanPhamColumn {
                get {
                    return this.columnTenSanPham;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DVTColumn {
                get {
                    return this.columnDVT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DonGiaColumn {
                get {
                    return this.columnDonGia;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThanhTienColumn {
                get {
                    return this.columnThanhTien;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SoluongColumn {
                get {
                    return this.columnSoluong;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GiamColumn {
                get {
                    return this.columnGiam;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDataDetailRow this[int index] {
                get {
                    return ((RDataDetailRow)(this.Rows[index]));
                }
            }
            
            public event RDataDetailRowChangeEventHandler RDataDetailRowChanging;
            
            public event RDataDetailRowChangeEventHandler RDataDetailRowChanged;
            
            public event RDataDetailRowChangeEventHandler RDataDetailRowDeleting;
            
            public event RDataDetailRowChangeEventHandler RDataDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRDataDetailRow(RDataDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDataDetailRow AddRDataDetailRow(string STT, string TenSanPham, string DVT, string DonGia, string ThanhTien, string Soluong, string Giam) {
                RDataDetailRow rowRDataDetailRow = ((RDataDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        STT,
                        TenSanPham,
                        DVT,
                        DonGia,
                        ThanhTien,
                        Soluong,
                        Giam};
                rowRDataDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRDataDetailRow);
                return rowRDataDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RDataDetailDataTable cln = ((RDataDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RDataDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSTT = base.Columns["STT"];
                this.columnTenSanPham = base.Columns["TenSanPham"];
                this.columnDVT = base.Columns["DVT"];
                this.columnDonGia = base.Columns["DonGia"];
                this.columnThanhTien = base.Columns["ThanhTien"];
                this.columnSoluong = base.Columns["Soluong"];
                this.columnGiam = base.Columns["Giam"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSTT = new global::System.Data.DataColumn("STT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTT);
                this.columnTenSanPham = new global::System.Data.DataColumn("TenSanPham", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTenSanPham);
                this.columnDVT = new global::System.Data.DataColumn("DVT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDVT);
                this.columnDonGia = new global::System.Data.DataColumn("DonGia", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDonGia);
                this.columnThanhTien = new global::System.Data.DataColumn("ThanhTien", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThanhTien);
                this.columnSoluong = new global::System.Data.DataColumn("Soluong", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSoluong);
                this.columnGiam = new global::System.Data.DataColumn("Giam", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGiam);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDataDetailRow NewRDataDetailRow() {
                return ((RDataDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RDataDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RDataDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RDataDetailRowChanged != null)) {
                    this.RDataDetailRowChanged(this, new RDataDetailRowChangeEvent(((RDataDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RDataDetailRowChanging != null)) {
                    this.RDataDetailRowChanging(this, new RDataDetailRowChangeEvent(((RDataDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RDataDetailRowDeleted != null)) {
                    this.RDataDetailRowDeleted(this, new RDataDetailRowChangeEvent(((RDataDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RDataDetailRowDeleting != null)) {
                    this.RDataDetailRowDeleting(this, new RDataDetailRowChangeEvent(((RDataDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRDataDetailRow(RDataDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetHoaDon ds = new DataSetHoaDon();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RDataDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HeaderDataDataTable : global::System.Data.TypedTableBase<HeaderDataRow> {
            
            private global::System.Data.DataColumn columnNgayxuat;
            
            private global::System.Data.DataColumn columnPhong;
            
            private global::System.Data.DataColumn columnGiaPhong;
            
            private global::System.Data.DataColumn columnHoaDonID;
            
            private global::System.Data.DataColumn columnGioBD;
            
            private global::System.Data.DataColumn columnGioKT;
            
            private global::System.Data.DataColumn columnNhanvien;
            
            private global::System.Data.DataColumn columnThue;
            
            private global::System.Data.DataColumn columnTiengio;
            
            private global::System.Data.DataColumn columnTiengiam;
            
            private global::System.Data.DataColumn columnPhuthu;
            
            private global::System.Data.DataColumn columnTienhang;
            
            private global::System.Data.DataColumn columnTongcong;
            
            private global::System.Data.DataColumn columnTenCongTy;
            
            private global::System.Data.DataColumn columnDiaChi;
            
            private global::System.Data.DataColumn columnSoDT;
            
            private global::System.Data.DataColumn columnTratruoc;
            
            private global::System.Data.DataColumn columnTralai;
            
            private global::System.Data.DataColumn columnLoichao1;
            
            private global::System.Data.DataColumn columnLoichao2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeaderDataDataTable() {
                this.TableName = "HeaderData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeaderDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HeaderDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NgayxuatColumn {
                get {
                    return this.columnNgayxuat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhongColumn {
                get {
                    return this.columnPhong;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GiaPhongColumn {
                get {
                    return this.columnGiaPhong;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HoaDonIDColumn {
                get {
                    return this.columnHoaDonID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GioBDColumn {
                get {
                    return this.columnGioBD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GioKTColumn {
                get {
                    return this.columnGioKT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NhanvienColumn {
                get {
                    return this.columnNhanvien;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThueColumn {
                get {
                    return this.columnThue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TiengioColumn {
                get {
                    return this.columnTiengio;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TiengiamColumn {
                get {
                    return this.columnTiengiam;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhuthuColumn {
                get {
                    return this.columnPhuthu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TienhangColumn {
                get {
                    return this.columnTienhang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TongcongColumn {
                get {
                    return this.columnTongcong;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TenCongTyColumn {
                get {
                    return this.columnTenCongTy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiaChiColumn {
                get {
                    return this.columnDiaChi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SoDTColumn {
                get {
                    return this.columnSoDT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TratruocColumn {
                get {
                    return this.columnTratruoc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TralaiColumn {
                get {
                    return this.columnTralai;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Loichao1Column {
                get {
                    return this.columnLoichao1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Loichao2Column {
                get {
                    return this.columnLoichao2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeaderDataRow this[int index] {
                get {
                    return ((HeaderDataRow)(this.Rows[index]));
                }
            }
            
            public event HeaderDataRowChangeEventHandler HeaderDataRowChanging;
            
            public event HeaderDataRowChangeEventHandler HeaderDataRowChanged;
            
            public event HeaderDataRowChangeEventHandler HeaderDataRowDeleting;
            
            public event HeaderDataRowChangeEventHandler HeaderDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHeaderDataRow(HeaderDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeaderDataRow AddHeaderDataRow(
                        string Ngayxuat, 
                        string Phong, 
                        string GiaPhong, 
                        string HoaDonID, 
                        string GioBD, 
                        string GioKT, 
                        string Nhanvien, 
                        string Thue, 
                        string Tiengio, 
                        string Tiengiam, 
                        string Phuthu, 
                        string Tienhang, 
                        string Tongcong, 
                        string TenCongTy, 
                        string DiaChi, 
                        string SoDT, 
                        string Tratruoc, 
                        string Tralai, 
                        string Loichao1, 
                        string Loichao2) {
                HeaderDataRow rowHeaderDataRow = ((HeaderDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Ngayxuat,
                        Phong,
                        GiaPhong,
                        HoaDonID,
                        GioBD,
                        GioKT,
                        Nhanvien,
                        Thue,
                        Tiengio,
                        Tiengiam,
                        Phuthu,
                        Tienhang,
                        Tongcong,
                        TenCongTy,
                        DiaChi,
                        SoDT,
                        Tratruoc,
                        Tralai,
                        Loichao1,
                        Loichao2};
                rowHeaderDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHeaderDataRow);
                return rowHeaderDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HeaderDataDataTable cln = ((HeaderDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HeaderDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNgayxuat = base.Columns["Ngayxuat"];
                this.columnPhong = base.Columns["Phong"];
                this.columnGiaPhong = base.Columns["GiaPhong"];
                this.columnHoaDonID = base.Columns["HoaDonID"];
                this.columnGioBD = base.Columns["GioBD"];
                this.columnGioKT = base.Columns["GioKT"];
                this.columnNhanvien = base.Columns["Nhanvien"];
                this.columnThue = base.Columns["Thue"];
                this.columnTiengio = base.Columns["Tiengio"];
                this.columnTiengiam = base.Columns["Tiengiam"];
                this.columnPhuthu = base.Columns["Phuthu"];
                this.columnTienhang = base.Columns["Tienhang"];
                this.columnTongcong = base.Columns["Tongcong"];
                this.columnTenCongTy = base.Columns["TenCongTy"];
                this.columnDiaChi = base.Columns["DiaChi"];
                this.columnSoDT = base.Columns["SoDT"];
                this.columnTratruoc = base.Columns["Tratruoc"];
                this.columnTralai = base.Columns["Tralai"];
                this.columnLoichao1 = base.Columns["Loichao1"];
                this.columnLoichao2 = base.Columns["Loichao2"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNgayxuat = new global::System.Data.DataColumn("Ngayxuat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNgayxuat);
                this.columnPhong = new global::System.Data.DataColumn("Phong", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhong);
                this.columnGiaPhong = new global::System.Data.DataColumn("GiaPhong", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGiaPhong);
                this.columnHoaDonID = new global::System.Data.DataColumn("HoaDonID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHoaDonID);
                this.columnGioBD = new global::System.Data.DataColumn("GioBD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGioBD);
                this.columnGioKT = new global::System.Data.DataColumn("GioKT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGioKT);
                this.columnNhanvien = new global::System.Data.DataColumn("Nhanvien", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNhanvien);
                this.columnThue = new global::System.Data.DataColumn("Thue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThue);
                this.columnTiengio = new global::System.Data.DataColumn("Tiengio", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTiengio);
                this.columnTiengiam = new global::System.Data.DataColumn("Tiengiam", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTiengiam);
                this.columnPhuthu = new global::System.Data.DataColumn("Phuthu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhuthu);
                this.columnTienhang = new global::System.Data.DataColumn("Tienhang", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTienhang);
                this.columnTongcong = new global::System.Data.DataColumn("Tongcong", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTongcong);
                this.columnTenCongTy = new global::System.Data.DataColumn("TenCongTy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTenCongTy);
                this.columnDiaChi = new global::System.Data.DataColumn("DiaChi", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiaChi);
                this.columnSoDT = new global::System.Data.DataColumn("SoDT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSoDT);
                this.columnTratruoc = new global::System.Data.DataColumn("Tratruoc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTratruoc);
                this.columnTralai = new global::System.Data.DataColumn("Tralai", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTralai);
                this.columnLoichao1 = new global::System.Data.DataColumn("Loichao1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoichao1);
                this.columnLoichao2 = new global::System.Data.DataColumn("Loichao2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoichao2);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeaderDataRow NewHeaderDataRow() {
                return ((HeaderDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HeaderDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HeaderDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HeaderDataRowChanged != null)) {
                    this.HeaderDataRowChanged(this, new HeaderDataRowChangeEvent(((HeaderDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HeaderDataRowChanging != null)) {
                    this.HeaderDataRowChanging(this, new HeaderDataRowChangeEvent(((HeaderDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HeaderDataRowDeleted != null)) {
                    this.HeaderDataRowDeleted(this, new HeaderDataRowChangeEvent(((HeaderDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HeaderDataRowDeleting != null)) {
                    this.HeaderDataRowDeleting(this, new HeaderDataRowChangeEvent(((HeaderDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHeaderDataRow(HeaderDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetHoaDon ds = new DataSetHoaDon();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HeaderDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RDataDetailRow : global::System.Data.DataRow {
            
            private RDataDetailDataTable tableRDataDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RDataDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRDataDetail = ((RDataDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STT {
                get {
                    try {
                        return ((string)(this[this.tableRDataDetail.STTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STT\' in table \'RDataDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRDataDetail.STTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TenSanPham {
                get {
                    try {
                        return ((string)(this[this.tableRDataDetail.TenSanPhamColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TenSanPham\' in table \'RDataDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRDataDetail.TenSanPhamColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DVT {
                get {
                    try {
                        return ((string)(this[this.tableRDataDetail.DVTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DVT\' in table \'RDataDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRDataDetail.DVTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DonGia {
                get {
                    try {
                        return ((string)(this[this.tableRDataDetail.DonGiaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DonGia\' in table \'RDataDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRDataDetail.DonGiaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ThanhTien {
                get {
                    try {
                        return ((string)(this[this.tableRDataDetail.ThanhTienColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ThanhTien\' in table \'RDataDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRDataDetail.ThanhTienColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Soluong {
                get {
                    try {
                        return ((string)(this[this.tableRDataDetail.SoluongColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Soluong\' in table \'RDataDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRDataDetail.SoluongColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Giam {
                get {
                    try {
                        return ((string)(this[this.tableRDataDetail.GiamColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Giam\' in table \'RDataDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRDataDetail.GiamColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTTNull() {
                return this.IsNull(this.tableRDataDetail.STTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTTNull() {
                this[this.tableRDataDetail.STTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTenSanPhamNull() {
                return this.IsNull(this.tableRDataDetail.TenSanPhamColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTenSanPhamNull() {
                this[this.tableRDataDetail.TenSanPhamColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDVTNull() {
                return this.IsNull(this.tableRDataDetail.DVTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDVTNull() {
                this[this.tableRDataDetail.DVTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDonGiaNull() {
                return this.IsNull(this.tableRDataDetail.DonGiaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDonGiaNull() {
                this[this.tableRDataDetail.DonGiaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThanhTienNull() {
                return this.IsNull(this.tableRDataDetail.ThanhTienColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThanhTienNull() {
                this[this.tableRDataDetail.ThanhTienColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSoluongNull() {
                return this.IsNull(this.tableRDataDetail.SoluongColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSoluongNull() {
                this[this.tableRDataDetail.SoluongColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGiamNull() {
                return this.IsNull(this.tableRDataDetail.GiamColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGiamNull() {
                this[this.tableRDataDetail.GiamColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HeaderDataRow : global::System.Data.DataRow {
            
            private HeaderDataDataTable tableHeaderData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeaderDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHeaderData = ((HeaderDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ngayxuat {
                get {
                    try {
                        return ((string)(this[this.tableHeaderData.NgayxuatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ngayxuat\' in table \'HeaderData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeaderData.NgayxuatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phong {
                get {
                    try {
                        return ((string)(this[this.tableHeaderData.PhongColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phong\' in table \'HeaderData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeaderData.PhongColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GiaPhong {
                get {
                    try {
                        return ((string)(this[this.tableHeaderData.GiaPhongColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GiaPhong\' in table \'HeaderData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeaderData.GiaPhongColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HoaDonID {
                get {
                    try {
                        return ((string)(this[this.tableHeaderData.HoaDonIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HoaDonID\' in table \'HeaderData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeaderData.HoaDonIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GioBD {
                get {
                    try {
                        return ((string)(this[this.tableHeaderData.GioBDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GioBD\' in table \'HeaderData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeaderData.GioBDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GioKT {
                get {
                    try {
                        return ((string)(this[this.tableHeaderData.GioKTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GioKT\' in table \'HeaderData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeaderData.GioKTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Nhanvien {
                get {
                    try {
                        return ((string)(this[this.tableHeaderData.NhanvienColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Nhanvien\' in table \'HeaderData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeaderData.NhanvienColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Thue {
                get {
                    try {
                        return ((string)(this[this.tableHeaderData.ThueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Thue\' in table \'HeaderData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeaderData.ThueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tiengio {
                get {
                    try {
                        return ((string)(this[this.tableHeaderData.TiengioColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Tiengio\' in table \'HeaderData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeaderData.TiengioColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tiengiam {
                get {
                    try {
                        return ((string)(this[this.tableHeaderData.TiengiamColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Tiengiam\' in table \'HeaderData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeaderData.TiengiamColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phuthu {
                get {
                    try {
                        return ((string)(this[this.tableHeaderData.PhuthuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phuthu\' in table \'HeaderData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeaderData.PhuthuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tienhang {
                get {
                    try {
                        return ((string)(this[this.tableHeaderData.TienhangColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Tienhang\' in table \'HeaderData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeaderData.TienhangColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tongcong {
                get {
                    try {
                        return ((string)(this[this.tableHeaderData.TongcongColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Tongcong\' in table \'HeaderData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeaderData.TongcongColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TenCongTy {
                get {
                    try {
                        return ((string)(this[this.tableHeaderData.TenCongTyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TenCongTy\' in table \'HeaderData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeaderData.TenCongTyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DiaChi {
                get {
                    try {
                        return ((string)(this[this.tableHeaderData.DiaChiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DiaChi\' in table \'HeaderData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeaderData.DiaChiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SoDT {
                get {
                    try {
                        return ((string)(this[this.tableHeaderData.SoDTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SoDT\' in table \'HeaderData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeaderData.SoDTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tratruoc {
                get {
                    try {
                        return ((string)(this[this.tableHeaderData.TratruocColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Tratruoc\' in table \'HeaderData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeaderData.TratruocColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tralai {
                get {
                    try {
                        return ((string)(this[this.tableHeaderData.TralaiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Tralai\' in table \'HeaderData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeaderData.TralaiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Loichao1 {
                get {
                    try {
                        return ((string)(this[this.tableHeaderData.Loichao1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Loichao1\' in table \'HeaderData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeaderData.Loichao1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Loichao2 {
                get {
                    try {
                        return ((string)(this[this.tableHeaderData.Loichao2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Loichao2\' in table \'HeaderData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeaderData.Loichao2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNgayxuatNull() {
                return this.IsNull(this.tableHeaderData.NgayxuatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNgayxuatNull() {
                this[this.tableHeaderData.NgayxuatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhongNull() {
                return this.IsNull(this.tableHeaderData.PhongColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhongNull() {
                this[this.tableHeaderData.PhongColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGiaPhongNull() {
                return this.IsNull(this.tableHeaderData.GiaPhongColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGiaPhongNull() {
                this[this.tableHeaderData.GiaPhongColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHoaDonIDNull() {
                return this.IsNull(this.tableHeaderData.HoaDonIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHoaDonIDNull() {
                this[this.tableHeaderData.HoaDonIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGioBDNull() {
                return this.IsNull(this.tableHeaderData.GioBDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGioBDNull() {
                this[this.tableHeaderData.GioBDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGioKTNull() {
                return this.IsNull(this.tableHeaderData.GioKTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGioKTNull() {
                this[this.tableHeaderData.GioKTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNhanvienNull() {
                return this.IsNull(this.tableHeaderData.NhanvienColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNhanvienNull() {
                this[this.tableHeaderData.NhanvienColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThueNull() {
                return this.IsNull(this.tableHeaderData.ThueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThueNull() {
                this[this.tableHeaderData.ThueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTiengioNull() {
                return this.IsNull(this.tableHeaderData.TiengioColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTiengioNull() {
                this[this.tableHeaderData.TiengioColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTiengiamNull() {
                return this.IsNull(this.tableHeaderData.TiengiamColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTiengiamNull() {
                this[this.tableHeaderData.TiengiamColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhuthuNull() {
                return this.IsNull(this.tableHeaderData.PhuthuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhuthuNull() {
                this[this.tableHeaderData.PhuthuColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTienhangNull() {
                return this.IsNull(this.tableHeaderData.TienhangColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTienhangNull() {
                this[this.tableHeaderData.TienhangColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTongcongNull() {
                return this.IsNull(this.tableHeaderData.TongcongColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTongcongNull() {
                this[this.tableHeaderData.TongcongColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTenCongTyNull() {
                return this.IsNull(this.tableHeaderData.TenCongTyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTenCongTyNull() {
                this[this.tableHeaderData.TenCongTyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiaChiNull() {
                return this.IsNull(this.tableHeaderData.DiaChiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiaChiNull() {
                this[this.tableHeaderData.DiaChiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSoDTNull() {
                return this.IsNull(this.tableHeaderData.SoDTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSoDTNull() {
                this[this.tableHeaderData.SoDTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTratruocNull() {
                return this.IsNull(this.tableHeaderData.TratruocColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTratruocNull() {
                this[this.tableHeaderData.TratruocColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTralaiNull() {
                return this.IsNull(this.tableHeaderData.TralaiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTralaiNull() {
                this[this.tableHeaderData.TralaiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoichao1Null() {
                return this.IsNull(this.tableHeaderData.Loichao1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoichao1Null() {
                this[this.tableHeaderData.Loichao1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoichao2Null() {
                return this.IsNull(this.tableHeaderData.Loichao2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoichao2Null() {
                this[this.tableHeaderData.Loichao2Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RDataDetailRowChangeEvent : global::System.EventArgs {
            
            private RDataDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDataDetailRowChangeEvent(RDataDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RDataDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HeaderDataRowChangeEvent : global::System.EventArgs {
            
            private HeaderDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeaderDataRowChangeEvent(HeaderDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeaderDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591